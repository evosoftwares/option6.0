import '/flutter_flow/flutter_flow_util.dart';
import '/index.dart';
import '/auth/firebase_auth/auth_util.dart';
import '/backend/supabase/supabase.dart';
import 'escolha_seu_perfil_widget.dart' show EscolhaSeuPerfilWidget;
import 'package:flutter/material.dart';
import 'dart:async';

class EscolhaSeuPerfilModel extends FlutterFlowModel<EscolhaSeuPerfilWidget> {
  /// Controle de estado para prevenir race conditions
  bool isDriverCreationInProgress = false;
  bool isPassengerCreationInProgress = false;

  /// Controle de valida√ß√£o de app_user
  bool isValidatingUser = false;
  bool hasValidAppUser = false;
  AppUsersRow? currentAppUser;
  Timer? _validationTimer;
  VoidCallback? updateUI;

  @override
  void initState(BuildContext context) {
    print('=== INICIALIZANDO EscolhaSeuPerfilModel ===');
    print('Estado inicial - isDriverCreationInProgress: $isDriverCreationInProgress');
    print('Estado inicial - isPassengerCreationInProgress: $isPassengerCreationInProgress');

    // Iniciar valida√ß√£o de app_user
    _startAppUserValidation();
  }

  @override
  void dispose() {
    print('=== DESTRUINDO EscolhaSeuPerfilModel ===');
    print('Estado final - isDriverCreationInProgress: $isDriverCreationInProgress');
    print('Estado final - isPassengerCreationInProgress: $isPassengerCreationInProgress');

    // Cancelar timer de valida√ß√£o
    _validationTimer?.cancel();
  }

  /// Inicia valida√ß√£o peri√≥dica de app_user
  void _startAppUserValidation() {
    print('üîç [VALIDATION] Iniciando valida√ß√£o peri√≥dica de app_user');

    // Valida√ß√£o inicial
    _validateAppUser();

    // Configurar valida√ß√£o peri√≥dica a cada 3 segundos
    _validationTimer = Timer.periodic(Duration(seconds: 3), (_) {
      _validateAppUser();
    });
  }

  /// Valida se o usu√°rio atual tem user_type preenchido na tabela app_users
  Future<void> _validateAppUser() async {
    if (isValidatingUser) return; // Evitar valida√ß√µes simult√¢neas

    try {
      isValidatingUser = true;
      print('üîç [VALIDATION] Validando user_type para currentUserUid: $currentUserUid');

      if (currentUserUid.isEmpty) {
        print('‚ö†Ô∏è [VALIDATION] currentUserUid vazio - user_type inv√°lido');
        hasValidAppUser = false;
        currentAppUser = null;
        return;
      }

      // Buscar por email primeiro
      List<AppUsersRow> appUsers = [];
      if (currentUserEmail.trim().isNotEmpty) {
        appUsers = await AppUsersTable().queryRows(
          queryFn: (q) => q.eq('email', currentUserEmail.trim()).limit(1),
        );
      }

      // Se n√£o encontrou por email, buscar por Firebase UID (coluna correta)
      if (appUsers.isEmpty) {
        appUsers = await AppUsersTable().queryRows(
          queryFn: (q) => q.eq('currentUser_UID_Firebase', currentUserUid).limit(1),
        );
      }

      // Fallback legado: buscar por fcm_token igual ao Firebase UID (para compatibilidade)
      if (appUsers.isEmpty) {
        appUsers = await AppUsersTable().queryRows(
          queryFn: (q) => q.eq('fcm_token', currentUserUid).limit(1),
        );
      }

      if (appUsers.isNotEmpty) {
        currentAppUser = appUsers.first;

        // Verificar especificamente se user_type est√° preenchido
        String? userType = currentAppUser?.userType;
        bool isUserTypeValid = userType?.trim().isNotEmpty == true &&
                               (userType == 'driver' || userType == 'passenger');

        hasValidAppUser = isUserTypeValid;

        if (isUserTypeValid) {
          print('‚úÖ [VALIDATION] user_type v√°lido encontrado: $userType');
          print('üÜî [VALIDATION] app_user.id: ${currentAppUser?.id}');
        } else {
          print('‚ùå [VALIDATION] user_type inv√°lido ou vazio: "$userType"');
          print('üÜî [VALIDATION] app_user existe, mas user_type n√£o est√° preenchido corretamente');
        }
      } else {
        hasValidAppUser = false;
        currentAppUser = null;
        print('‚ùå [VALIDATION] Nenhum app_user encontrado - user_type n√£o pode ser validado');
      }

    } catch (e) {
      print('üí• [VALIDATION] Erro ao validar app_user: $e');
      hasValidAppUser = false;
      currentAppUser = null;
    } finally {
      isValidatingUser = false;
      updateUI?.call(); // Atualizar UI se callback dispon√≠vel
    }
  }

  /// Verifica se o usu√°rio pode sair desta tela (baseado especificamente em user_type)
  bool canLeaveScreen() {
    print('üö™ [CAN_LEAVE] Verificando se pode sair da tela baseado em user_type');
    print('üö™ [CAN_LEAVE] hasValidAppUser: $hasValidAppUser');
    print('üö™ [CAN_LEAVE] currentAppUser existe: ${currentAppUser != null}');
    print('üö™ [CAN_LEAVE] user_type atual: "${currentAppUser?.userType}"');

    // Verifica√ß√£o espec√≠fica da coluna user_type
    String? userType = currentAppUser?.userType;
    bool hasValidUserType = userType?.trim().isNotEmpty == true &&
                           (userType == 'driver' || userType == 'passenger');

    bool canLeave = hasValidAppUser &&
                    currentAppUser != null &&
                    hasValidUserType;

    print('üö™ [CAN_LEAVE] pode sair: $canLeave');
    return canLeave;
  }

  /// Para a valida√ß√£o peri√≥dica (usado quando perfil √© criado com sucesso)
  void stopValidation() {
    print('‚èπÔ∏è [VALIDATION] Parando valida√ß√£o peri√≥dica');
    _validationTimer?.cancel();
    _validationTimer = null;
  }

  /// For√ßa uma revalida√ß√£o imediata
  Future<void> forceValidation() async {
    print('üîÑ [VALIDATION] For√ßando revalida√ß√£o imediata');
    await _validateAppUser();
  }
}
