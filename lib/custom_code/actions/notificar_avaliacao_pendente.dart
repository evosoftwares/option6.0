import '/backend/supabase/supabase.dart';
import 'package:flutter/material.dart';

/// Sistema de Notifica√ß√£o para Solicita√ß√£o de Avalia√ß√µes
/// Deve ser chamado quando uma viagem √© finalizada (status = 'completed')

/// Verifica se h√° avalia√ß√µes pendentes e programa notifica√ß√µes
Future<Map<String, dynamic>> verificarAvaliacoesPendentes(String tripId) async {
  try {
    // 1. Buscar informa√ß√µes da viagem
    final tripQuery = await TripsTable().queryRows(
      queryFn: (q) => q.eq('id', tripId),
    );

    if (tripQuery.isEmpty) {
      return {
        'sucesso': false,
        'erro': 'Viagem n√£o encontrada',
      };
    }

    final trip = tripQuery.first;

    // Verificar se a viagem est√° realmente finalizada
    if (trip.status != 'completed') {
      return {
        'sucesso': false,
        'erro': 'Viagem ainda n√£o foi finalizada',
      };
    }

    // 2. Verificar avalia√ß√µes existentes
    final existingRatings = await RatingsTable().queryRows(
      queryFn: (q) => q.eq('trip_id', tripId),
    );

    bool precisaAvaliacaoMotorista = true;
    bool precisaAvaliacaoPassageiro = true;

    if (existingRatings.isNotEmpty) {
      final rating = existingRatings.first;
      precisaAvaliacaoMotorista = rating.driverRating == null;
      precisaAvaliacaoPassageiro = rating.passengerRating == null;
    }

    // 3. Programar notifica√ß√µes se necess√°rio
    List<String> notificacoesProgramadas = [];

    if (precisaAvaliacaoMotorista) {
      await _programarNotificacaoAvaliacao(
        tripId,
        'motorista',
        trip.passengerId ?? '',
        delay: Duration(minutes: 5),
      );
      notificacoesProgramadas
          .add('Notifica√ß√£o para avaliar motorista programada');
    }

    if (precisaAvaliacaoPassageiro) {
      await _programarNotificacaoAvaliacao(
        tripId,
        'passageiro',
        trip.driverId ?? '',
        delay: Duration(minutes: 5),
      );
      notificacoesProgramadas
          .add('Notifica√ß√£o para avaliar passageiro programada');
    }

    return {
      'sucesso': true,
      'avaliacoesPendentes': {
        'motorista': precisaAvaliacaoMotorista,
        'passageiro': precisaAvaliacaoPassageiro,
      },
      'notificacoes': notificacoesProgramadas,
    };
  } catch (e) {
    return {
      'sucesso': false,
      'erro': 'Erro ao verificar avalia√ß√µes pendentes: ${e.toString()}',
    };
  }
}

/// Programa uma notifica√ß√£o para solicitar avalia√ß√£o
Future<void> _programarNotificacaoAvaliacao(
    String tripId,
    String tipoAvaliacao, // 'motorista' ou 'passageiro'
    String userId,
    {Duration delay = const Duration(minutes: 5)}) async {
  try {
    // Aguardar o delay especificado
    await Future.delayed(delay);

    // Inserir notifica√ß√£o na tabela
    final titulo = tipoAvaliacao == 'motorista'
        ? 'Avalie seu motorista'
        : 'Avalie seu passageiro';

    final corpo = tipoAvaliacao == 'motorista'
        ? 'Como foi sua viagem? Avalie seu motorista e ajude outros usu√°rios!'
        : 'Como foi o passageiro? Sua avalia√ß√£o ajuda a melhorar o servi√ßo!';

    await NotificationsTable().insert({
      'user_id': userId,
      'title': titulo,
      'body': corpo,
      'type': 'avaliacao_pendente',
      'data': {
        'trip_id': tripId,
        'tipo_avaliacao': tipoAvaliacao,
        'action': 'abrir_tela_avaliacao',
      },
      'is_read': false,
      'sent_at': DateTime.now().toIso8601String(),
    });

    print(
        'Notifica√ß√£o de avalia√ß√£o programada para $tipoAvaliacao (Trip: $tripId)');
  } catch (e) {
    print('Erro ao programar notifica√ß√£o: $e');
  }
}

/// Envia lembrete para avalia√ß√µes n√£o respondidas ap√≥s 24h
Future<void> enviarLembreteAvaliacao(String tripId) async {
  try {
    // Verificar se ainda h√° avalia√ß√µes pendentes ap√≥s 24h
    final resultado = await verificarAvaliacoesPendentes(tripId);

    if (resultado['sucesso'] != true) {
      return;
    }

    final avaliacoesPendentes =
        resultado['avaliacoesPendentes'] as Map<String, dynamic>;

    // Buscar informa√ß√µes da viagem para o lembrete
    final tripQuery = await TripsTable().queryRows(
      queryFn: (q) => q.eq('id', tripId),
    );

    if (tripQuery.isEmpty) {
      return;
    }

    final trip = tripQuery.first;

    // Enviar lembrete se ainda h√° avalia√ß√µes pendentes
    if (avaliacoesPendentes['motorista'] == true) {
      await NotificationsTable().insert({
        'user_id': trip.passengerId,
        'title': 'üåü Lembrete: Avalie seu motorista',
        'body':
            'Voc√™ ainda n√£o avaliou sua √∫ltima viagem. Sua opini√£o √© importante!',
        'type': 'lembrete_avaliacao',
        'data': {
          'trip_id': tripId,
          'tipo_avaliacao': 'motorista',
          'action': 'abrir_tela_avaliacao',
        },
        'is_read': false,
        'sent_at': DateTime.now().toIso8601String(),
      });
    }

    if (avaliacoesPendentes['passageiro'] == true) {
      await NotificationsTable().insert({
        'user_id': trip.driverId,
        'title': 'üåü Lembrete: Avalie seu passageiro',
        'body':
            'Voc√™ ainda n√£o avaliou seu √∫ltimo passageiro. Ajude a melhorar o servi√ßo!',
        'type': 'lembrete_avaliacao',
        'data': {
          'trip_id': tripId,
          'tipo_avaliacao': 'passageiro',
          'action': 'abrir_tela_avaliacao',
        },
        'is_read': false,
        'sent_at': DateTime.now().toIso8601String(),
      });
    }
  } catch (e) {
    print('Erro ao enviar lembrete de avalia√ß√£o: $e');
  }
}

/// Marca uma notifica√ß√£o como lida
Future<bool> marcarNotificacaoComoLida(String notificationId) async {
  try {
    await NotificationsTable().update(
      data: {
        'is_read': true,
        'read_at': DateTime.now().toIso8601String(),
      },
      matchingRows: (rows) => rows.eq('id', notificationId),
    );
    return true;
  } catch (e) {
    print('Erro ao marcar notifica√ß√£o como lida: $e');
    return false;
  }
}

/// Busca notifica√ß√µes n√£o lidas do usu√°rio
Future<List<NotificationsRow>> buscarNotificacoesNaoLidas(String userId) async {
  try {
    final notificacoes = await NotificationsTable().queryRows(
      queryFn: (q) => q
          .eq('user_id', userId)
          .eq('is_read', false)
          .order('created_at', ascending: false),
    );
    return notificacoes;
  } catch (e) {
    print('Erro ao buscar notifica√ß√µes: $e');
    return [];
  }
}
